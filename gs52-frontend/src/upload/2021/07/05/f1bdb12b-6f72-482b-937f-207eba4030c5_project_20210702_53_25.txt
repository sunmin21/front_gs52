-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- WORK_TYPE Table Create SQL
CREATE TABLE WORK_TYPE
(
    WORK_TYPE_INDEX    NUMBER          NULL, 
    WORK_TYPE_NAME     VARCHAR2(20)    NULL, 
    CONSTRAINT PK_WORK_TYPE PRIMARY KEY (WORK_TYPE_INDEX)
)
/

CREATE SEQUENCE WORK_TYPE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WORK_TYPE_AI_TRG
BEFORE INSERT ON WORK_TYPE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT WORK_TYPE_SEQ.NEXTVAL
    INTO :NEW.WORK_TYPE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER WORK_TYPE_AI_TRG;
/

--DROP SEQUENCE WORK_TYPE_SEQ;
/


-- WORK_RULE Table Create SQL
CREATE TABLE WORK_RULE
(
    WORK_RULE_INDEX              NUMBER          NULL, 
    WORK_RULE_WORK_TYPE_INDEX    NUMBER          NULL, 
    WORK_RULE_NAME               VARCHAR2(20)    NULL, 
    WORK_RULE_START              VARCHAR2(30)    NULL, 
    WORK_RULE_END                VARCHAR2(30)    NULL, 
    WORK_RULE_BREAK              VARCHAR2(30)    NULL, 
    WORK_RULE_AVG_HOUR           NUMBER          NULL, 
    CONSTRAINT PK_WORK_RULE PRIMARY KEY (WORK_RULE_INDEX)
)
/

CREATE SEQUENCE WORK_RULE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WORK_RULE_AI_TRG
BEFORE INSERT ON WORK_RULE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT WORK_RULE_SEQ.NEXTVAL
    INTO :NEW.WORK_RULE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER WORK_RULE_AI_TRG;
/

--DROP SEQUENCE WORK_RULE_SEQ;
/

ALTER TABLE WORK_RULE
    ADD CONSTRAINT FK_WORK_RULE_WORK_RULE_WORK_TY FOREIGN KEY (WORK_RULE_WORK_TYPE_INDEX)
        REFERENCES WORK_TYPE (WORK_TYPE_INDEX)
/


-- DEPT Table Create SQL
CREATE TABLE DEPT
(
    DEPT_INDEX    NUMBER          NULL, 
    DEPT_NAME     VARCHAR2(20)    NULL, 
    CONSTRAINT PK_DEPT PRIMARY KEY (DEPT_INDEX)
)
/

CREATE SEQUENCE DEPT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER DEPT_AI_TRG
BEFORE INSERT ON DEPT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT DEPT_SEQ.NEXTVAL
    INTO :NEW.DEPT_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER DEPT_AI_TRG;
/

--DROP SEQUENCE DEPT_SEQ;
/


-- POSITION Table Create SQL
CREATE TABLE POSITION
(
    POSITION_INDEX    NUMBER          NULL, 
    POSITION_NAME     VARCHAR2(20)    NULL, 
    CONSTRAINT PK_POSITION PRIMARY KEY (POSITION_INDEX)
)
/

CREATE SEQUENCE POSITION_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER POSITION_AI_TRG
BEFORE INSERT ON POSITION 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT POSITION_SEQ.NEXTVAL
    INTO :NEW.POSITION_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER POSITION_AI_TRG;
/

--DROP SEQUENCE POSITION_SEQ;
/


-- TEAM Table Create SQL
CREATE TABLE TEAM
(
    TEAM_INDEX         NUMBER          NULL, 
    TEAM_DEPT_INDEX    NUMBER          NULL, 
    TEAM_NAME          VARCHAR2(20)    NULL, 
    TEAM_WORK_TYPE     NUMBER          NULL, 
    CONSTRAINT PK_TEAM PRIMARY KEY (TEAM_INDEX)
)
/

CREATE SEQUENCE TEAM_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TEAM_AI_TRG
BEFORE INSERT ON TEAM 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT TEAM_SEQ.NEXTVAL
    INTO :NEW.TEAM_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER TEAM_AI_TRG;
/

--DROP SEQUENCE TEAM_SEQ;
/

ALTER TABLE TEAM
    ADD CONSTRAINT FK_TEAM_TEAM_WORK_TYPE_WORK_RU FOREIGN KEY (TEAM_WORK_TYPE)
        REFERENCES WORK_RULE (WORK_RULE_INDEX)
/

ALTER TABLE TEAM
    ADD CONSTRAINT FK_TEAM_TEAM_DEPT_INDEX_DEPT_D FOREIGN KEY (TEAM_DEPT_INDEX)
        REFERENCES DEPT (DEPT_INDEX)
/


-- RANK Table Create SQL
CREATE TABLE RANK
(
    RANK_INDEX    NUMBER          NULL, 
    RANK_NAME     VARCHAR2(20)    NULL, 
    CONSTRAINT PK_RANK PRIMARY KEY (RANK_INDEX)
)
/

CREATE SEQUENCE RANK_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER RANK_AI_TRG
BEFORE INSERT ON RANK 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT RANK_SEQ.NEXTVAL
    INTO :NEW.RANK_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER RANK_AI_TRG;
/

--DROP SEQUENCE RANK_SEQ;
/


-- CONF_ROOM Table Create SQL
CREATE TABLE CONF_ROOM
(
    CONF_ROOM_INDEX     NUMBER    NULL, 
    CONF_ROOM_FLOOR     NUMBER    NULL, 
    CONF_ROOM_NUMBER    NUMBER    NULL, 
    CONSTRAINT PK_ROOM PRIMARY KEY (CONF_ROOM_INDEX)
)
/

CREATE SEQUENCE CONF_ROOM_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER CONF_ROOM_AI_TRG
BEFORE INSERT ON CONF_ROOM 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT CONF_ROOM_SEQ.NEXTVAL
    INTO :NEW.CONF_ROOM_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER CONF_ROOM_AI_TRG;
/

--DROP SEQUENCE CONF_ROOM_SEQ;
/


-- PROJECT Table Create SQL
CREATE TABLE PROJECT
(
    PROJECT_INDEX      NUMBER           NOT NULL, 
    PROJECT_TITLE      VARCHAR2(30)     NULL, 
    PROJECT_CONTENT    VARCHAR2(500)    NULL, 
    PROJECT_START      VARCHAR2(30)     NULL, 
    PROJECT_END        VARCHAR2(30)     NULL, 
    PROJECT_OKAY       NUMBER           NULL, 
    PROJECT_DATE       VARCHAR2(30)     NULL, 
    CONSTRAINT PK_PROJECT PRIMARY KEY (PROJECT_INDEX)
)
/

CREATE SEQUENCE PROJECT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PROJECT_AI_TRG
BEFORE INSERT ON PROJECT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT PROJECT_SEQ.NEXTVAL
    INTO :NEW.PROJECT_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER PROJECT_AI_TRG;
/

--DROP SEQUENCE PROJECT_SEQ;
/


-- EMP Table Create SQL
CREATE TABLE EMP
(
    EMP_INDEX             NUMBER           NULL, 
    EMP_ID                VARCHAR2(20)     NULL, 
    EMP_NAME              VARCHAR2(20)     NULL, 
    EMP_PWD               VARCHAR2(120)    NULL, 
    EMP_EMAIL             VARCHAR2(50)     NULL, 
    EMP_ADDRESS           VARCHAR2(50)     NULL, 
    EMP_PHONE             VARCHAR2(20)     NULL, 
    EMP_BIRTH             VARCHAR2(20)     NULL, 
    EMP_INTRO             VARCHAR2(50)     NULL, 
    EMP_PHOTO             VARCHAR2(50)     NULL, 
    EMP_ENTRY_DATE        VARCHAR2(30)     NULL, 
    EMP_RANK_INDEX        NUMBER           NULL, 
    EMP_TEAM_INDEX        NUMBER           NULL, 
    EMP_POSITION_INDEX    NUMBER           NULL, 
    EMP_BANK_NAME         VARCHAR2(20)     NULL, 
    EMP_ACCOUNT_NUMBER    VARCHAR2(30)     NULL, 
    EMP_VACATION          NUMBER           NULL, 
    EMP_SALARY            VARCHAR2(20)     NULL, 
    EMP_FIRST_LOGIN       CHAR(1)          NULL, 
    CONSTRAINT PK_EMP PRIMARY KEY (EMP_INDEX)
)
/

ALTER TABLE EMP
    ADD CONSTRAINT FK_EMP_EMP_RANK_INDEX_RANK_RAN FOREIGN KEY (EMP_RANK_INDEX)
        REFERENCES RANK (RANK_INDEX)
/

ALTER TABLE EMP
    ADD CONSTRAINT FK_EMP_EMP_TEAM_INDEX_TEAM_TEA FOREIGN KEY (EMP_TEAM_INDEX)
        REFERENCES TEAM (TEAM_INDEX)
/

ALTER TABLE EMP
    ADD CONSTRAINT FK_EMP_EMP_POSITION_INDEX_POSI FOREIGN KEY (EMP_POSITION_INDEX)
        REFERENCES POSITION (POSITION_INDEX)
/


-- PROJECT_WITH Table Create SQL
CREATE TABLE PROJECT_WITH
(
    PROJECT_WITH_INDEX        NUMBER           NOT NULL, 
    PROJECT_WITH_EMP_INDEX    NUMBER           NULL, 
    PROJECT_INDEX             NUMBER           NULL, 
    PROJECT_WITH_OKAY         NUMBER           NULL, 
    PROJECT_WITH_REJECT       VARCHAR2(200)    NULL, 
    PROJECT_WITH_LEADER       NUMBER           NULL, 
    PROJECT_WITH_COLOR        VARCHAR2(20)     NULL, 
    CONSTRAINT PK_PROJECT_WITH PRIMARY KEY (PROJECT_WITH_INDEX, PROJECT_WITH_EMP_INDEX)
)
/

CREATE SEQUENCE PROJECT_WITH_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PROJECT_WITH_AI_TRG
BEFORE INSERT ON PROJECT_WITH 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT PROJECT_WITH_SEQ.NEXTVAL
    INTO :NEW.PROJECT_WITH_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER PROJECT_WITH_AI_TRG;
/

--DROP SEQUENCE PROJECT_WITH_SEQ;
/

ALTER TABLE PROJECT_WITH
    ADD CONSTRAINT FK_PROJECT_WITH_PROJECT_INDEX_ FOREIGN KEY (PROJECT_INDEX)
        REFERENCES PROJECT (PROJECT_INDEX)
/

ALTER TABLE PROJECT_WITH
    ADD CONSTRAINT FK_PROJECT_WITH_PROJECT_WITH_E FOREIGN KEY (PROJECT_WITH_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


-- CONF Table Create SQL
CREATE TABLE CONF
(
    CONF_INDEX             NUMBER          NULL, 
    CONF_TITLE             VARCHAR2(20)    NULL, 
    CONF_ROOM_INDEX        NUMBER          NULL, 
    CONF_DATE              VARCHAR2(20)    NULL, 
    CONF_START             VARCHAR2(20)    NULL, 
    CONF_END               VARCHAR2(20)    NULL, 
    CONF_EMP_INDEX_SEND    NUMBER          NULL, 
    CONSTRAINT PK_ROOM_BOOK PRIMARY KEY (CONF_INDEX)
)
/

CREATE SEQUENCE CONF_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER CONF_AI_TRG
BEFORE INSERT ON CONF 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT CONF_SEQ.NEXTVAL
    INTO :NEW.CONF_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER CONF_AI_TRG;
/

--DROP SEQUENCE CONF_SEQ;
/

ALTER TABLE CONF
    ADD CONSTRAINT FK_CONF_CONF_ROOM_INDEX_CONF_R FOREIGN KEY (CONF_ROOM_INDEX)
        REFERENCES CONF_ROOM (CONF_ROOM_INDEX)
/

ALTER TABLE CONF
    ADD CONSTRAINT FK_CONF_CONF_EMP_INDEX_SEND_EM FOREIGN KEY (CONF_EMP_INDEX_SEND)
        REFERENCES EMP (EMP_INDEX)
/


-- ATTEND_TYPE Table Create SQL
CREATE TABLE ATTEND_TYPE
(
    ATTEND_TYPE_INDEX    NUMBER          NULL, 
    ATTEND_TYPE_NAME     VARCHAR2(20)    NULL, 
    CONSTRAINT PK_ATTEND_INFO PRIMARY KEY (ATTEND_TYPE_INDEX)
)
/

CREATE SEQUENCE ATTEND_TYPE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ATTEND_TYPE_AI_TRG
BEFORE INSERT ON ATTEND_TYPE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT ATTEND_TYPE_SEQ.NEXTVAL
    INTO :NEW.ATTEND_TYPE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER ATTEND_TYPE_AI_TRG;
/

--DROP SEQUENCE ATTEND_TYPE_SEQ;
/


-- TODO Table Create SQL
CREATE TABLE TODO
(
    TODO_INDEX             NUMBER           NULL, 
    TODO_EMP_INDEX_SEND    NUMBER           NULL, 
    TODO_TITLE             VARCHAR2(20)     NULL, 
    TODO_CONTENTS          VARCHAR2(100)    NULL, 
    TODO_START_DATE        VARCHAR2(30)     NULL, 
    CONSTRAINT PK_TODO PRIMARY KEY (TODO_INDEX)
)
/

CREATE SEQUENCE TODO_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TODO_AI_TRG
BEFORE INSERT ON TODO 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT TODO_SEQ.NEXTVAL
    INTO :NEW.TODO_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER TODO_AI_TRG;
/

--DROP SEQUENCE TODO_SEQ;
/

ALTER TABLE TODO
    ADD CONSTRAINT FK_TODO_TODO_EMP_INDEX_SEND_EM FOREIGN KEY (TODO_EMP_INDEX_SEND)
        REFERENCES EMP (EMP_INDEX)
/


-- PROJECT_FILE Table Create SQL
CREATE TABLE PROJECT_FILE
(
    PROJECT_FILE_INDEX            NUMBER           NOT NULL, 
    PROJECT_FILE_PROJECT_INDEX    NUMBER           NULL, 
    PROJECT_FILE_ORIGIN_NAME      VARCHAR2(40)     NULL, 
    PROJECT_FILE_NAME             VARCHAR2(100)    NULL, 
    PROJECT_FILE_PATH             VARCHAR2(150)    NULL, 
    PROJECT_FILE_DATE             VARCHAR2(30)     NULL, 
    CONSTRAINT PK_PROJECT_FILE PRIMARY KEY (PROJECT_FILE_INDEX)
)
/

CREATE SEQUENCE PROJECT_FILE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PROJECT_FILE_AI_TRG
BEFORE INSERT ON PROJECT_FILE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT PROJECT_FILE_SEQ.NEXTVAL
    INTO :NEW.PROJECT_FILE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER PROJECT_FILE_AI_TRG;
/

--DROP SEQUENCE PROJECT_FILE_SEQ;
/

ALTER TABLE PROJECT_FILE
    ADD CONSTRAINT FK_PROJECT_FILE_PROJECT_FILE_P FOREIGN KEY (PROJECT_FILE_PROJECT_INDEX)
        REFERENCES PROJECT (PROJECT_INDEX)
/


-- ROLES Table Create SQL
CREATE TABLE ROLES
(
    ID      NUMBER           NOT NULL, 
    NAME    NVARCHAR2(20)    NULL, 
    CONSTRAINT PK_ROLES PRIMARY KEY (ID)
)
/

CREATE SEQUENCE ROLES_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ROLES_AI_TRG
BEFORE INSERT ON ROLES 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT ROLES_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
END;
/

--DROP TRIGGER ROLES_AI_TRG;
/

--DROP SEQUENCE ROLES_SEQ;
/


-- USER_ROLES Table Create SQL
CREATE TABLE USER_ROLES
(
    EMP_INDEX    NUMBER    NOT NULL, 
    ROLE_ID      NUMBER    NULL, 
    CONSTRAINT PK_USER_ROLES PRIMARY KEY (EMP_INDEX)
)
/


-- PROJECT_REPORT Table Create SQL
CREATE TABLE PROJECT_REPORT
(
    PROJECT_REPORT_INDEX        NUMBER           NOT NULL, 
    PROJECT_REPORT_EMP_INDEX    NUMBER           NULL, 
    PROJECT_REPORT_CONTENT      VARCHAR2(400)    NULL, 
    PROJECT_REPORT_DAY          VARCHAR2(30)     NULL, 
    CONSTRAINT PK_PROJECT_REPORT PRIMARY KEY (PROJECT_REPORT_INDEX)
)
/

CREATE SEQUENCE PROJECT_REPORT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PROJECT_REPORT_AI_TRG
BEFORE INSERT ON PROJECT_REPORT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT PROJECT_REPORT_SEQ.NEXTVAL
    INTO :NEW.PROJECT_REPORT_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER PROJECT_REPORT_AI_TRG;
/

--DROP SEQUENCE PROJECT_REPORT_SEQ;
/

ALTER TABLE PROJECT_REPORT
    ADD CONSTRAINT FK_PROJECT_REPORT_PROJECT_REPO FOREIGN KEY (PROJECT_REPORT_EMP_INDEX, PROJECT_REPORT_INDEX)
        REFERENCES PROJECT_WITH (PROJECT_WITH_EMP_INDEX, PROJECT_WITH_INDEX)
/


-- PROJECT_TASK Table Create SQL
CREATE TABLE PROJECT_TASK
(
    PROJECT_TASK_INDEX      NUMBER          NOT NULL, 
    PROJECT_INDEX           NUMBER          NULL, 
    PROJECT_TASK_SUCCESS    VARCHAR2(30)    NULL, 
    PROJECT_TASK_PERCENT    VARCHAR2(20)    NULL, 
    PROJECT_TASK_CONTENT    VARCHAR2(50)    NULL, 
    CONSTRAINT PK_PROJECT_TASK PRIMARY KEY (PROJECT_TASK_INDEX)
)
/

CREATE SEQUENCE PROJECT_TASK_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PROJECT_TASK_AI_TRG
BEFORE INSERT ON PROJECT_TASK 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT PROJECT_TASK_SEQ.NEXTVAL
    INTO :NEW.PROJECT_TASK_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER PROJECT_TASK_AI_TRG;
/

--DROP SEQUENCE PROJECT_TASK_SEQ;
/

ALTER TABLE PROJECT_TASK
    ADD CONSTRAINT FK_PROJECT_TASK_PROJECT_INDEX_ FOREIGN KEY (PROJECT_INDEX)
        REFERENCES PROJECT (PROJECT_INDEX)
/


-- CONF_RE Table Create SQL
CREATE TABLE CONF_RE
(
    CONF_RE_INDEX         NUMBER    NULL, 
    CONF_RE_EMP_INDEX     NUMBER    NULL, 
    CONF_RE_CONF_INDEX    NUMBER    NULL, 
    CONSTRAINT PK_ROOM_B_RE PRIMARY KEY (CONF_RE_INDEX)
)
/

CREATE SEQUENCE CONF_RE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER CONF_RE_AI_TRG
BEFORE INSERT ON CONF_RE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT CONF_RE_SEQ.NEXTVAL
    INTO :NEW.CONF_RE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER CONF_RE_AI_TRG;
/

--DROP SEQUENCE CONF_RE_SEQ;
/

ALTER TABLE CONF_RE
    ADD CONSTRAINT FK_CONF_RE_CONF_RE_CONF_INDEX_ FOREIGN KEY (CONF_RE_CONF_INDEX)
        REFERENCES CONF (CONF_INDEX)
/

ALTER TABLE CONF_RE
    ADD CONSTRAINT FK_CONF_RE_CONF_RE_EMP_INDEX_E FOREIGN KEY (CONF_RE_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


-- TODO_RE Table Create SQL
CREATE TABLE TODO_RE
(
    TODO_RE_INDEX         NUMBER               NULL, 
    TODO_RE_EMP_INDEX     NUMBER               NULL, 
    TODO_RE_TODO_INDEX    NUMBER               NULL, 
    TODO_DONE             NUMBER               NULL, 
    TODO_END_DATE         VARCHAR2(30 byte)    NULL, 
    CONSTRAINT PK_TODO_RE PRIMARY KEY (TODO_RE_INDEX)
)
/

CREATE SEQUENCE TODO_RE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TODO_RE_AI_TRG
BEFORE INSERT ON TODO_RE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT TODO_RE_SEQ.NEXTVAL
    INTO :NEW.TODO_RE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER TODO_RE_AI_TRG;
/

--DROP SEQUENCE TODO_RE_SEQ;
/

ALTER TABLE TODO_RE
    ADD CONSTRAINT FK_TODO_RE_TODO_RE_EMP_INDEX_E FOREIGN KEY (TODO_RE_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/

ALTER TABLE TODO_RE
    ADD CONSTRAINT FK_TODO_RE_TODO_RE_TODO_INDEX_ FOREIGN KEY (TODO_RE_TODO_INDEX)
        REFERENCES TODO (TODO_INDEX)
/


-- BREAK Table Create SQL
CREATE TABLE BREAK
(
    BREAK_INDEX        NUMBER          NULL, 
    BRAEK_EMP_INDEX    NUMBER          NULL, 
    BREAK_DATE         VARCHAR2(30)    NULL, 
    BREAK_START        VARCHAR2(30)    NULL, 
    BREAK_END          VARCHAR2(30)    NULL, 
    CONSTRAINT PK_BREAK PRIMARY KEY (BREAK_INDEX)
)
/

CREATE SEQUENCE BREAK_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER BREAK_AI_TRG
BEFORE INSERT ON BREAK 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT BREAK_SEQ.NEXTVAL
    INTO :NEW.BREAK_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER BREAK_AI_TRG;
/

--DROP SEQUENCE BREAK_SEQ;
/

ALTER TABLE BREAK
    ADD CONSTRAINT FK_BREAK_BRAEK_EMP_INDEX_EMP_E FOREIGN KEY (BRAEK_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


-- HOLIDAY Table Create SQL
CREATE TABLE HOLIDAY
(
    HOLIDAY_INDEX            INT             NULL, 
    HOLIDAY_DATE             VARCHAR2(20)    NULL, 
    HOLIDAY_TITLE            VARCHAR2(20)    NULL, 
    HOLIDAY_ANNUAL_REPEAT    VARCHAR2(20)    NULL, 
    CONSTRAINT PK_HOLIDAY PRIMARY KEY (HOLIDAY_INDEX)
)
/

CREATE SEQUENCE HOLIDAY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER HOLIDAY_AI_TRG
BEFORE INSERT ON HOLIDAY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT HOLIDAY_SEQ.NEXTVAL
    INTO :NEW.HOLIDAY_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER HOLIDAY_AI_TRG;
/

--DROP SEQUENCE HOLIDAY_SEQ;
/


-- ATTEND Table Create SQL
CREATE TABLE ATTEND
(
    ATTEND_INDEX                NUMBER          NULL, 
    ATTEND_EMP_INDEX            NUMBER          NULL, 
    ATTEND_DATE                 VARCHAR2(30)    NULL, 
    ATTEND_START                VARCHAR2(30)    NULL, 
    ATTEND_BREAK                VARCHAR2(30)    NULL, 
    ATTEND_END                  VARCHAR2(30)    NULL, 
    ATTEND_ATTEND_TYPE_INDEX    NUMBER          NULL, 
    CONSTRAINT PK_ATTEND PRIMARY KEY (ATTEND_INDEX)
)
/

CREATE SEQUENCE ATTEND_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ATTEND_AI_TRG
BEFORE INSERT ON ATTEND 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT ATTEND_SEQ.NEXTVAL
    INTO :NEW.ATTEND_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER ATTEND_AI_TRG;
/

--DROP SEQUENCE ATTEND_SEQ;
/

ALTER TABLE ATTEND
    ADD CONSTRAINT FK_ATTEND_ATTEND_ATTEND_TYPE_I FOREIGN KEY (ATTEND_ATTEND_TYPE_INDEX)
        REFERENCES ATTEND_TYPE (ATTEND_TYPE_INDEX)
/

ALTER TABLE ATTEND
    ADD CONSTRAINT FK_ATTEND_ATTEND_EMP_INDEX_EMP FOREIGN KEY (ATTEND_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


-- VACATION Table Create SQL
CREATE TABLE VACATION
(
    VACATION_INDEX                NUMBER           NULL, 
    VACATION_EMP_INDEX            NUMBER           NULL, 
    VACATION_DATE                 VARCHAR2(30)     NULL, 
    VACATION_ATTEND_INFO_INDEX    NUMBER           NULL, 
    VACATION_CONTENTS             VARCHAR2(100)    NULL, 
    VACATION_STATUS               NUMBER           NULL, 
    CONSTRAINT PK_VACATION PRIMARY KEY (VACATION_INDEX)
)
/

CREATE SEQUENCE VACATION_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER VACATION_AI_TRG
BEFORE INSERT ON VACATION 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT VACATION_SEQ.NEXTVAL
    INTO :NEW.VACATION_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER VACATION_AI_TRG;
/

--DROP SEQUENCE VACATION_SEQ;
/

ALTER TABLE VACATION
    ADD CONSTRAINT FK_VACATION_VACATION_EMP_INDEX FOREIGN KEY (VACATION_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/

ALTER TABLE VACATION
    ADD CONSTRAINT FK_VACATION_VACATION_ATTEND_IN FOREIGN KEY (VACATION_ATTEND_INFO_INDEX)
        REFERENCES ATTEND_TYPE (ATTEND_TYPE_INDEX)
/


-- REPORT Table Create SQL
CREATE TABLE REPORT
(
    REPORT_INDEX          NUMBER           NULL, 
    REPORT_EMP_INDEX      NUMBER           NULL, 
    REPORT_CONTENTS       VARCHAR2(100)    NULL, 
    REPORT_TARGET_DATE    VARCHAR2(30)     NULL, 
    CONSTRAINT PK_REPORT PRIMARY KEY (REPORT_INDEX)
)
/

CREATE SEQUENCE REPORT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER REPORT_AI_TRG
BEFORE INSERT ON REPORT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT REPORT_SEQ.NEXTVAL
    INTO :NEW.REPORT_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER REPORT_AI_TRG;
/

--DROP SEQUENCE REPORT_SEQ;
/

ALTER TABLE REPORT
    ADD CONSTRAINT FK_REPORT_REPORT_EMP_INDEX_EMP FOREIGN KEY (REPORT_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


-- NOTICE Table Create SQL
CREATE TABLE NOTICE
(
    NOTICE_INDEX        NUMBER           NULL, 
    NOTICE_TITLE        VARCHAR2(50)     NULL, 
    NOTICE_CONTENTS     VARCHAR2(500)    NULL, 
    NOTICE_EMP_INDEX    NUMBER           NULL, 
    NOTICE_DATE         VARCHAR2(30)     NULL, 
    CONSTRAINT PK_NOTICE PRIMARY KEY (NOTICE_INDEX)
)
/

CREATE SEQUENCE NOTICE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER NOTICE_AI_TRG
BEFORE INSERT ON NOTICE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT NOTICE_SEQ.NEXTVAL
    INTO :NEW.NOTICE_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER NOTICE_AI_TRG;
/

--DROP SEQUENCE NOTICE_SEQ;
/

ALTER TABLE NOTICE
    ADD CONSTRAINT FK_NOTICE_NOTICE_EMP_INDEX_EMP FOREIGN KEY (NOTICE_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


-- AUTHORITY Table Create SQL
CREATE TABLE AUTHORITY
(
    AUTHORITY_INDEX             NUMBER    NULL, 
    AUTHORITY_EMP_INDEX         NUMBER    NULL, 
    AUTHORITY_MANAGE_RANK       NUMBER    NULL, 
    AUTHORITY_HUMAN_RESOURCE    NUMBER    NULL, 
    AUTHORITY_ATTENDANCE        NUMBER    NULL, 
    AUTHORITY_SCHEDULE          NUMBER    NULL, 
    CONSTRAINT PK_AUTHORITY PRIMARY KEY (AUTHORITY_INDEX)
)
/

CREATE SEQUENCE AUTHORITY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER AUTHORITY_AI_TRG
BEFORE INSERT ON AUTHORITY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT AUTHORITY_SEQ.NEXTVAL
    INTO :NEW.AUTHORITY_INDEX
    FROM DUAL;
END;
/

--DROP TRIGGER AUTHORITY_AI_TRG;
/

--DROP SEQUENCE AUTHORITY_SEQ;
/

ALTER TABLE AUTHORITY
    ADD CONSTRAINT FK_AUTHORITY_AUTHORITY_EMP_IND FOREIGN KEY (AUTHORITY_EMP_INDEX)
        REFERENCES EMP (EMP_INDEX)
/


